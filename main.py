import streamlit as st
from dotenv import load_dotenv
from langchain_groq import ChatGroq
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain_core.prompts import ChatPromptTemplate


def response_to_json(user_query):
    """
    Generate a JSON response using a chatbot with tool integration.

    Args:
        user_query (str): The user's query.

    Returns:
        Any: The response generated by the agent executor.
    """
    
    tools = [TavilySearchResults(max_results=3)]
    prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            (
                "You are a helpful assistant. Respond to all queries in well-formatted Markdown. "
                "When providing information, use appropriate Markdown elements such as: "
                "headings (`#`, `##`, etc.) for structure, bullet points (`-` or `*`) for lists, "
                "tables for structured data, and code blocks (```language) for code. "
                "Make sure to use the `tavily_search_results_json` tool for information when relevant."
            ),
        ),
        ("placeholder", "{chat_history}"),
        ("human", "{input}"),
        ("placeholder", "{agent_scratchpad}"),
    ]
    )

    llm = ChatGroq(model='llama-3.2-3b-preview')

    # Construct the Tools agent
    agent = create_tool_calling_agent(llm, tools, prompt)
    agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)
    response = agent_executor.invoke({"input": user_query})
    
    return response


def main():
    load_dotenv()
    
    st.set_page_config(page_title="ChatBot Based on web-Search", page_icon="ðŸ”Ž", layout="wide")
    st.title("ChatBot Based on web-Search ðŸ”Ž")
    
    user_query = st.chat_input("Ask me anything: ")
    
    if user_query:
        response = response_to_json(user_query)
        
        with st.chat_message("user"):
            st.write(response['input'])
        
        with st.chat_message("assistant"):
            with st.spinner('Searching...'):
                st.write(response['output'])
            
            

# if __name__ == "__main__":
main()